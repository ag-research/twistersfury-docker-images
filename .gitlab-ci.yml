image: docker:git

services:
  - docker:dind

stages:
    - build
    - test
    - release
    - deploy
    - secondary-build
    - secondary-test
    - secondary-release
    - secondary-deploy

#Nginx w/SSL
build:nginx:
    tags: ["docker"]
    stage: build
    script:
#        - alias 'dockerize=git whatchanged HEAD^! | grep nginx/Dockerfile > /dev/null'
#        - dockerize || (echo "no need to build new docker image" && exit 0)
        - docker build -t $CI_REGISTRY_IMAGE/nginx:$CI_BUILD_REF_NAME ./nginx
        - echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
        - docker push $CI_REGISTRY_IMAGE/nginx:$CI_BUILD_REF_NAME

.test:nginx:
    stage: test
    image: $CI_REGISTRY_IMAGE/docker:$CI_BUILD_REF_NAME
    services:
        - name: $CI_REGISTRY_IMAGE/nginx:$CI_BUILD_REF_NAME
          alias: nginx.test
    variables:
        ENV_DOMAIN_NAME: nginx.test
        ENV_UPSTREAM_HOST: 127.0.0.1:8000
    script:
        - wget -qO - http://nginx.test/.well-known/ci.log

release:nginx:
    tags: ["docker"]
    stage: release
    script:
#        - alias 'dockerize=git whatchanged HEAD^! | grep nginx/Dockerfile > /dev/null'
#        - dockerize || (echo "no need to build new docker image" && exit 0)
        - docker pull $CI_REGISTRY_IMAGE/nginx:$CI_BUILD_REF_NAME
        - docker tag $CI_REGISTRY_IMAGE/nginx:$CI_BUILD_REF_NAME $CI_REGISTRY_IMAGE/nginx:latest
        - echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
        - docker push $CI_REGISTRY_IMAGE/nginx:latest
    only:
        - master

deploy:nginx:
    tags: ["docker"]
    stage: deploy
    script:
#        - alias 'dockerize=git whatchanged HEAD^! | grep nginx/Dockerfile > /dev/null'
#        - dockerize || (echo "no need to build new docker image" && exit 0)
        - docker pull $CI_REGISTRY_IMAGE/nginx:latest
        - docker tag $CI_REGISTRY_IMAGE/nginx:latest twistersfury/nginx:latest
        - echo "$DOCKER_PASSWORD" | docker login -u $DOCKER_USER --password-stdin
        - docker push twistersfury/nginx:latest
    only:
        - master

#PHP Debug
build:php:fpm-7.1-debug:
    tags: ["docker"]
    stage: build
    script:
        - alias 'normalRun=[ ! -z "$ENV_FORCE_BUILD" ]'
        - alias 'dockerize=git whatchanged HEAD^! | grep php/7.1/fpm-debug/Dockerfile > /dev/null'
        - (normalRun || dockerize) && docker build -t $CI_REGISTRY_IMAGE/php:$CI_BUILD_REF_NAME ./php/7.1/fpm-debug
        - (normalRun || dockerize) && echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
        - (normalRun || dockerize) && docker push $CI_REGISTRY_IMAGE/php:$CI_BUILD_REF_NAME
        - dockerize || (echo "no need to build new docker image" && exit 0)

test:php:fpm-7.1-debug:
    image: $CI_REGISTRY_IMAGE/php:$CI_BUILD_REF_NAME
    stage: test
    script:
        - php -i | grep "enable-debug"

release:php:fpm-7.1-debug:
    tags: ["docker"]
    stage: release
    script:
        - alias 'normalRun=[ ! -z "$ENV_FORCE_BUILD" ]'
        - alias 'dockerize=git whatchanged HEAD^! | grep php/7.1/fpm-debug/Dockerfile > /dev/null'
        - (normalRun || dockerize) && docker pull $CI_REGISTRY_IMAGE/php:$CI_BUILD_REF_NAME
        - (normalRun || dockerize) && docker tag $CI_REGISTRY_IMAGE/php:$CI_BUILD_REF_NAME $CI_REGISTRY_IMAGE/php:fpm-7.1-debug
        - (normalRun || dockerize) && echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
        - (normalRun || dockerize) && docker push $CI_REGISTRY_IMAGE/php:fpm-7.1-debug
        - dockerize || (echo "no need to build new docker image" && exit 0)
    only:
        - master

deploy:php:fpm-7.1-debug:
    tags: ["docker"]
    stage: deploy
    script:
        - alias 'normalRun=[ ! -z "$ENV_FORCE_BUILD" ]'
        - alias 'dockerize=git whatchanged HEAD^! | grep php/7.1/fpm-debug/Dockerfile > /dev/null'
        - (normalRun || dockerize) && docker pull $CI_REGISTRY_IMAGE/php:$CI_BUILD_REF_NAME
        - (normalRun || dockerize) && docker tag $CI_REGISTRY_IMAGE/php:$CI_BUILD_REF_NAME twistersfury/php:fpm-7.1-debug
        - (normalRun || dockerize) && echo "$DOCKER_PASSWORD" | docker login -u $DOCKER_USER --password-stdin
        - (normalRun || dockerize) && docker push twistersfury/php:fpm-7.1-debug
        - dockerize || (echo "no need to build new docker image" && exit 0)
    only:
        - master

# Latest Phalcon
build:phalcon:latest:
    tags: ["docker"]
    stage: build
    script:
        - alias 'normalRun=[ ! -z "$ENV_FORCE_BUILD" ]'
        - alias 'dockerize=git whatchanged HEAD^! | grep phalcon/latest/Dockerfile > /dev/null'
        - (normalRun || dockerize) && docker build -t $CI_REGISTRY_IMAGE/phalcon:$CI_BUILD_REF_NAME ./phalcon/latest
        - (normalRun || dockerize) && echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
        - (normalRun || dockerize) && docker push $CI_REGISTRY_IMAGE/phalcon:$CI_BUILD_REF_NAME
        - (normalRun || dockerize) || (echo "no need to build new docker image" && exit 0)

test:phalcon:latest:
    image: $CI_REGISTRY_IMAGE/phalcon:$CI_BUILD_REF_NAME
    stage: test
    script:
        - php -m | grep phalcon

release:phalcon:latest:
    tags: ["docker"]
    stage: release
    script:
        - alias 'normalRun=[ ! -z "$ENV_FORCE_BUILD" ]'
        - alias 'dockerize=git whatchanged HEAD^! | grep phalcon/latest/Dockerfile > /dev/null'
        - (normalRun || dockerize) && docker pull $CI_REGISTRY_IMAGE/phalcon:$CI_BUILD_REF_NAME
        - (normalRun || dockerize) && docker tag $CI_REGISTRY_IMAGE/phalcon:$CI_BUILD_REF_NAME $CI_REGISTRY_IMAGE/phalcon:latest
        - (normalRun || dockerize) && export PHALCON_TAG=`docker run --rm $CI_REGISTRY_IMAGE/phalcon:$CI_BUILD_REF_NAME php -r "echo \Phalcon\Version::get();"`
        - (normalRun || dockerize) && docker tag $CI_REGISTRY_IMAGE/phalcon:$CI_BUILD_REF_NAME $CI_REGISTRY_IMAGE/phalcon:$PHALCON_TAG
        - (normalRun || dockerize) && echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
        - (normalRun || dockerize) && docker push $CI_REGISTRY_IMAGE/phalcon:$PHALCON_TAG
        - (normalRun || dockerize) && docker push $CI_REGISTRY_IMAGE/phalcon:latest
        - dockerize || (echo "no need to build new docker image" && exit 0)
    only:
        - master

deploy:phalcon:latest:
    tags: ["docker"]
    stage: deploy
    script:
        - alias 'normalRun=[ ! -z "$ENV_FORCE_BUILD" ]'
        - alias 'dockerize=git whatchanged HEAD^! | grep phalcon/latest/Dockerfile > /dev/null'
        - (normalRun || dockerize) && docker pull $CI_REGISTRY_IMAGE/phalcon:latest
        - (normalRun || dockerize) && docker tag $CI_REGISTRY_IMAGE/phalcon:latest twistersfury/phalcon:latest
        - (normalRun || dockerize) && export PHALCON_TAG=`docker run --rm $CI_REGISTRY_IMAGE/phalcon:$CI_BUILD_REF_NAME php -r "echo \Phalcon\Version::get();"`
        - (normalRun || dockerize) && docker tag $CI_REGISTRY_IMAGE/phalcon:$CI_BUILD_REF_NAME twistersfury/phalcon:$PHALCON_TAG
        - (normalRun || dockerize) && echo "$DOCKER_PASSWORD" | docker login -u $DOCKER_USER --password-stdin
        - (normalRun || dockerize) && docker push twistersfury/phalcon:$PHALCON_TAG
        - (normalRun || dockerize) && docker push twistersfury/phalcon:latest
        - dockerize || (echo "no need to build new docker image" && exit 0)
    only:
        - master

# Latest Phalcon
build:phalcon:phpstan:
    tags: ["docker"]
    stage: build
    script:
        - alias 'normalRun=[ ! -z "$ENV_FORCE_BUILD" ]'
        - alias 'dockerize=git whatchanged HEAD^! | grep phalcon/tools/PHPStan/Dockerfile > /dev/null'
        - (normalRun || dockerize) && docker build --pull -t $CI_REGISTRY_IMAGE/phalcon:$CI_BUILD_REF_NAME-phpstan ./phalcon/tools/PHPStan
        - (normalRun || dockerize) && echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
        - (normalRun || dockerize) && docker push $CI_REGISTRY_IMAGE/phalcon:$CI_BUILD_REF_NAME-phpstan
        - dockerize || (echo "no need to build new docker image" && exit 0)

test:phalcon:phpstan:
    image:
        name: $CI_REGISTRY_IMAGE/phalcon:$CI_BUILD_REF_NAME-phpstan
        entrypoint: [""]
    stage: test
    script:
        - php -m | grep phalcon
        - which phpstan

release:phalcon:phpstan:
    tags: ["docker"]
    stage: release
    script:
        - alias 'normalRun=[ ! -z "$ENV_FORCE_BUILD" ]'
        - alias 'dockerize=git whatchanged HEAD^! | grep phalcon/tools/PHPStan/Dockerfile > /dev/null'
        - (normalRun || dockerize) && docker pull $CI_REGISTRY_IMAGE/phalcon:$CI_BUILD_REF_NAME-phpstan
        - (normalRun || dockerize) && docker tag $CI_REGISTRY_IMAGE/phalcon:$CI_BUILD_REF_NAME-phpstan $CI_REGISTRY_IMAGE/phalcon:phpstan
        - (normalRun || dockerize) && echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
        - (normalRun || dockerize) && docker push $CI_REGISTRY_IMAGE/phalcon:phpstan
        - dockerize || (echo "no need to build new docker image" && exit 0)
    only:
        - master

deploy:phalcon:phpstan:
    tags: ["docker"]
    stage: deploy
    script:
        - alias 'normalRun=[ ! -z "$ENV_FORCE_BUILD" ]'
        - alias 'dockerize=git whatchanged HEAD^! | grep phalcon/tools/PHPStan/Dockerfile > /dev/null'
        - (normalRun || dockerize) && docker pull $CI_REGISTRY_IMAGE/phalcon:phpstan
        - (normalRun || dockerize) && docker tag $CI_REGISTRY_IMAGE/phalcon:phpstan twistersfury/phalcon:phpstan
        - (normalRun || dockerize) && echo "$DOCKER_PASSWORD" | docker login -u $DOCKER_USER --password-stdin
        - (normalRun || dockerize) && docker push twistersfury/phalcon:phpstan
        - dockerize || (echo "no need to build new docker image" && exit 0)
    only:
        - master

#Docker
build:docker:latest:
    tags: ["docker"]
    stage: build
    script:
        - alias 'normalRun=[ ! -z "$ENV_FORCE_BUILD" ]'
        - alias 'dockerize=git whatchanged HEAD^! | grep docker/Dockerfile > /dev/null'
        - (normalRun || dockerize) && docker build -t $CI_REGISTRY_IMAGE/docker:$CI_BUILD_REF_NAME ./docker
        - (normalRun || dockerize) && echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
        - (normalRun || dockerize) && docker push $CI_REGISTRY_IMAGE/docker:$CI_BUILD_REF_NAME
        - dockerize || (echo "no need to build new docker image" && exit 0)

test:docker:latest:
    image: $CI_REGISTRY_IMAGE/docker:$CI_BUILD_REF_NAME
    stage: test
    script:
        - which wget
        - which docker-compose

release:docker:latest:
    tags: ["docker"]
    stage: release
    before_script:
        - apk --no-cache add curl
    script:
        - alias 'normalRun=[ ! -z "$ENV_FORCE_BUILD" ]'
        - alias 'dockerize=git whatchanged HEAD^! | grep docker/Dockerfile > /dev/null'
        - COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep 'tag_name' | cut -d\" -f4)
        - (normalRun || dockerize) && docker pull $CI_REGISTRY_IMAGE/docker:$CI_BUILD_REF_NAME
        - (normalRun || dockerize) && docker tag $CI_REGISTRY_IMAGE/docker:$CI_BUILD_REF_NAME $CI_REGISTRY_IMAGE/docker:latest
        - (normalRun || dockerize) && docker tag $CI_REGISTRY_IMAGE/docker:$CI_BUILD_REF_NAME $CI_REGISTRY_IMAGE/docker:$COMPOSE_VERSION
        - (normalRun || dockerize) && echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
        - (normalRun || dockerize) && docker push $CI_REGISTRY_IMAGE/docker:latest
        - (normalRun || dockerize) && docker push $CI_REGISTRY_IMAGE/docker:$COMPOSE_VERSION
        - dockerize || (echo "no need to build new docker image" && exit 0)
    only:
        - master

deploy:docker:latest:
    tags: ["docker"]
    stage: deploy
    before_script:
        - apk --no-cache add curl
    script:
        - alias 'normalRun=[ ! -z "$ENV_FORCE_BUILD" ]'
        - alias 'dockerize=git whatchanged HEAD^! | grep docker/Dockerfile > /dev/null'
        - COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep 'tag_name' | cut -d\" -f4)
        - (normalRun || dockerize) && docker pull $CI_REGISTRY_IMAGE/docker:latest
        - (normalRun || dockerize) && docker tag $CI_REGISTRY_IMAGE/docker:latest twistersfury/docker:latest
        - (normalRun || dockerize) && docker tag $CI_REGISTRY_IMAGE/docker:latest twistersfury/docker:$COMPOSE_VERSION
        - (normalRun || dockerize) && echo "$DOCKER_PASSWORD" | docker login -u $DOCKER_USER --password-stdin
        - (normalRun || dockerize) && docker push twistersfury/docker:latest
        - (normalRun || dockerize) && docker push twistersfury/docker:$COMPOSE_VERSION
        - dockerize || (echo "no need to build new docker image" && exit 0)
    only:
        - master

# Latest Cron
build:cron:latest:
    tags: ["docker"]
    stage: build
    script:
        - alias 'normalRun=[ ! -z "$ENV_FORCE_BUILD" ]'
        - alias 'dockerize=git whatchanged HEAD^! | grep cron/Dockerfile > /dev/null'
        - (normalRun || dockerize) && docker build -t $CI_REGISTRY_IMAGE/cron:$CI_BUILD_REF_NAME ./cron
        - (normalRun || dockerize) && echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
        - (normalRun || dockerize) && docker push $CI_REGISTRY_IMAGE/cron:$CI_BUILD_REF_NAME
        - dockerize || (echo "no need to build new docker image" && exit 0)

release:cron:latest:
    tags: ["docker"]
    stage: release
    script:
        - alias 'normalRun=[ ! -z "$ENV_FORCE_BUILD" ]'
        - alias 'dockerize=git whatchanged HEAD^! | grep cron/Dockerfile > /dev/null'
        - (normalRun || dockerize) && docker pull $CI_REGISTRY_IMAGE/cron:$CI_BUILD_REF_NAME
        - (normalRun || dockerize) && docker tag $CI_REGISTRY_IMAGE/cron:$CI_BUILD_REF_NAME $CI_REGISTRY_IMAGE/cron:latest
        - (normalRun || dockerize) && echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
        - (normalRun || dockerize) && docker push $CI_REGISTRY_IMAGE/cron:latest
        - dockerize || (echo "no need to build new docker image" && exit 0)
    only:
        - master

deploy:cron:latest:
    tags: ["docker"]
    stage: deploy
    script:
        - alias 'normalRun=[ ! -z "$ENV_FORCE_BUILD" ]'
        - alias 'dockerize=git whatchanged HEAD^! | grep cron/Dockerfile > /dev/null'
        - (normalRun || dockerize) && docker pull $CI_REGISTRY_IMAGE/cron:latest
        - (normalRun || dockerize) && docker tag $CI_REGISTRY_IMAGE/cron:latest twistersfury/cron:latest
        - (normalRun || dockerize) && echo "$DOCKER_PASSWORD" | docker login -u $DOCKER_USER --password-stdin
        - (normalRun || dockerize) && docker push twistersfury/cron:latest
        - dockerize || (echo "no need to build new docker image" && exit 0)
    only:
        - master


#XDebug Phalcon
build:phalcon:xdebug:
    tags: ["docker"]
    stage: secondary-build
    script:
        - alias 'normalRun=[ ! -z "$ENV_FORCE_BUILD" ]'
        - alias 'dockerize=git whatchanged HEAD^! | grep phalcon/xdebug/Dockerfile > /dev/null'
        - (normalRun || dockerize) && docker build -t $CI_REGISTRY_IMAGE/phalcon-xdebug:$CI_BUILD_REF_NAME ./phalcon/xdebug
        - (normalRun || dockerize) && echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
        - (normalRun || dockerize) && docker push $CI_REGISTRY_IMAGE/phalcon-xdebug:$CI_BUILD_REF_NAME
        - dockerize || (echo "no need to build new docker image" && exit 0)

test:phalcon:xdebug:
    image: $CI_REGISTRY_IMAGE/phalcon-xdebug:$CI_BUILD_REF_NAME
    stage: secondary-test
    script:
        - php -m | grep xdebug

release:phalcon:xdebug:
    tags: ["docker"]
    stage: secondary-release
    script:
        - alias 'normalRun=[ ! -z "$ENV_FORCE_BUILD" ]'
        - alias 'dockerize=git whatchanged HEAD^! | grep phalcon/xdebug/Dockerfile > /dev/null'
        - (normalRun || dockerize) && docker pull $CI_REGISTRY_IMAGE/phalcon-xdebug:$CI_BUILD_REF_NAME
        - (normalRun || dockerize) && docker tag $CI_REGISTRY_IMAGE/phalcon-xdebug:$CI_BUILD_REF_NAME $CI_REGISTRY_IMAGE/phalcon:xdebug
        - (normalRun || dockerize) && export PHALCON_TAG=`docker run --rm $CI_REGISTRY_IMAGE/phalcon:$CI_BUILD_REF_NAME php -r "echo \Phalcon\Version::get();"`
        - (normalRun || dockerize) && docker tag $CI_REGISTRY_IMAGE/phalcon:$CI_BUILD_REF_NAME $CI_REGISTRY_IMAGE/phalcon:xdebug-$PHALCON_TAG
        - (normalRun || dockerize) && echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
        - (normalRun || dockerize) && docker push $CI_REGISTRY_IMAGE/phalcon:xdebug-$PHALCON_TAG
        - (normalRun || dockerize) && docker push $CI_REGISTRY_IMAGE/phalcon:xdebug
        - dockerize || (echo "no need to build new docker image" && exit 0)
    only:
        - master

deploy:phalcon:xdebug:
    tags: ["docker"]
    stage: secondary-deploy
    script:
        - alias 'normalRun=[ ! -z "$ENV_FORCE_BUILD" ]'
        - alias 'dockerize=git whatchanged HEAD^! | grep phalcon/xdebug/Dockerfile > /dev/null'
        - (normalRun || dockerize) && docker pull $CI_REGISTRY_IMAGE/phalcon:xdebug
        - (normalRun || dockerize) && docker tag $CI_REGISTRY_IMAGE/phalcon:xdebug twistersfury/phalcon:xdebug
        - (normalRun || dockerize) && export PHALCON_TAG=`docker run --rm $CI_REGISTRY_IMAGE/phalcon:$CI_BUILD_REF_NAME php -r "echo \Phalcon\Version::get();"`
        - (normalRun || dockerize) && docker tag $CI_REGISTRY_IMAGE/phalcon:$CI_BUILD_REF_NAME twistersfury/phalcon:xdebug-$PHALCON_TAG
        - (normalRun || dockerize) && echo "$DOCKER_PASSWORD" | docker login -u $DOCKER_USER --password-stdin
        - (normalRun || dockerize) && docker push twistersfury/phalcon:xdebug-$PHALCON_TAG
        - (normalRun || dockerize) && docker push twistersfury/phalcon:xdebug
        - dockerize || (echo "no need to build new docker image" && exit 0)
    only:
        - master
        
#XDebug Phalcon
build:phalcon:dev-tools:
    tags: ["docker"]
    stage: secondary-build
    script:
        - alias 'normalRun=[ ! -z "$ENV_FORCE_BUILD" ]'
        - alias 'dockerize=git whatchanged HEAD^! | grep phalcon-devtools/Dockerfile > /dev/null'
        - (normalRun || dockerize) && docker build -t $CI_REGISTRY_IMAGE/phalcon-devtools:$CI_BUILD_REF_NAME ./phalcon-devtools
        - (normalRun || dockerize) && echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
        - (normalRun || dockerize) && docker push $CI_REGISTRY_IMAGE/phalcon-devtools:$CI_BUILD_REF_NAME
        - dockerize || (echo "no need to build new docker image" && exit 0)

test:phalcon:dev-tools:
    image: $CI_REGISTRY_IMAGE/phalcon-devtools:$CI_BUILD_REF_NAME
    stage: secondary-test
    script:
        - phalcon | grep 'Phalcon DevTools'

release:phalcon:dev-tools:
    tags: ["docker"]
    stage: secondary-release
    script:
        - alias 'normalRun=[ ! -z "$ENV_FORCE_BUILD" ]'
        - alias 'dockerize=git whatchanged HEAD^! | grep phalcon-devtools/Dockerfile > /dev/null'
        - (normalRun || dockerize) && docker pull $CI_REGISTRY_IMAGE/phalcon-devtools:$CI_BUILD_REF_NAME
        - (normalRun || dockerize) && docker tag $CI_REGISTRY_IMAGE/phalcon-devtools:$CI_BUILD_REF_NAME $CI_REGISTRY_IMAGE/phalcon-devtools
        - (normalRun || dockerize) && echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
        - (normalRun || dockerize) && docker push $CI_REGISTRY_IMAGE/phalcon-devtools
        - dockerize || (echo "no need to build new docker image" && exit 0)
    only:
        - master

deploy:phalcon:dev-tools:
    tags: ["docker"]
    stage: secondary-deploy
    script:
        - alias 'normalRun=[ ! -z "$ENV_FORCE_BUILD" ]'
        - alias 'dockerize=git whatchanged HEAD^! | grep phalcon-devtools/Dockerfile > /dev/null'
        - (normalRun || dockerize) && docker pull $CI_REGISTRY_IMAGE/phalcon-devtools
        - (normalRun || dockerize) && docker tag $CI_REGISTRY_IMAGE/phalcon-devtools twistersfury/phalcon-devtools
        - (normalRun || dockerize) && echo "$DOCKER_PASSWORD" | docker login -u $DOCKER_USER --password-stdin
        - (normalRun || dockerize) && docker push twistersfury/phalcon-devtools
        - dockerize || (echo "no need to build new docker image" && exit 0)
    only:
        - master